apply plugin: 'com.android.application'

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com'
        }
    }
}

task wrapper(type: Wrapper) {
    // generate gradlew wrapper files for specified version of gradle
    gradleVersion = '4.6'
}


def getVersionCodeFromProjectProperty = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    logger.lifecycle("VersionCode is set to $code")
    return code
}

def getVersionNameFromProjectProperty = { ->
    def name = project.hasProperty('versionName') ? versionName : "1.0"
    logger.lifecycle("VersionName is set to $name")
    return name
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.eegeo.cardboardvrdemo"
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        versionCode getVersionCodeFromProjectProperty()
        versionName getVersionNameFromProjectProperty()
        archivesBaseName = "app"

        externalNativeBuild {
            cmake {
                cppFlags "-Wall", "-Wno-unknown-pragmas", "-Wno-sign-compare", "-Wno-format-security",
                         "-Wno-reorder", "-Wno-expansion-to-defined", "-frtti", "-fexceptions", "-std=c++11",
                         "-D__STDC_FORMAT_MACROS"
                arguments "-DANDROID=1", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_MODE=arm", "-DANDROID_STL=c++_static"
            }

            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            externalNativeBuild {
                cmake {
                    cppFlags "-g"
                    arguments "-DDEBUG=1"
                }
            }

            jniDebuggable true
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}


if (project.hasProperty("external.signing")) {

    def signingGradlePath = project.property("external.signing") + ".gradle"
    if (new File(signingGradlePath).exists()) {
        def signingGradle = project.property("external.signing") + ".gradle"
        logger.lifecycle("applying signing properties from " + signingGradle)
        apply from: signingGradle
    }
    else {
        throw new InvalidUserDataException('Project parameter external.signing supplied but gradle file does not exist at path relative to project: ' + signingGradlePath)
    }
} else {
    logger.lifecycle("no external.signing property supplied." )
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:multidex:1.0.1'

}
